---
nameOverride: ""
fullnameOverride: ""

image:
  repository: ghcr.io/5dlabs/agent-docs
  tag: latest
  pullPolicy: Always

imagePullSecrets: []

replicaCount: 2

service:
  type: ClusterIP
  port: 80
  targetPort: 3001

env:
  # When not using an existing secret, set inline values here
  DATABASE_URL: ""
  OPENAI_API_KEY: ""
  RUST_LOG: "info,doc_server=debug"
  PORT: "3001"
  MCP_HOST: "0.0.0.0"
  # Writable working directory for ingestion temp files
  INGEST_WORK_DIR: "/tmp"

# Optional persistent storage for ingestion working directory
persistence:
  enabled: false
  # If true and existingClaim is empty, a PVC will be created
  # If using an existing claim, set existingClaim and leave size/storageClassName as-is
  existingClaim: ""
  mountPath: "/work"            # Will be used as INGEST_WORK_DIR when enabled
  size: 10Gi
  storageClassName: "local-path" # e.g., Rancher local-path provisioner
  accessModes:
    - ReadWriteOnce
  annotations: {}

# If set, chart will read env via secretKeyRef instead of plain values
secret:
  existingSecret: ""
  keys:
    # Map runtime DATABASE_URL from VECTOR_DATABASE_URL key in the secret
    DATABASE_URL: VECTOR_DATABASE_URL
    OPENAI_API_KEY: OPENAI_API_KEY

resources:
  requests:
    cpu: 500m
    memory: 512Mi
  limits:
    cpu: 1000m
    memory: 1Gi

podAnnotations: {}

podSecurityContext:
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  runAsNonRoot: true

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL

serviceAccount:
  create: true
  name: ""

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: example.com
      paths:
        - path: /
          pathType: Prefix
  tls: []

hpa:
  enabled: false
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 75

migrations:
  serviceAccountName: default
  enabled: true
  backoffLimit: 3
  activeDeadlineSeconds: 7200
  # Command and args used for the migration job
  # Defaults run the server binary in migration-only mode from the runtime image
  command: ["/app/http_server"]
  args: ["--migrate-only"]
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi
  annotations: {}
  # Optional extra env vars for migration job
  extraEnv: []

nodeSelector: {}

tolerations: []

affinity: {}

# Tools configuration as JSON string
# This will be mounted as /app/tools.json in the container
toolsConfig: |
  {
    "tools": [
      {
        "name": "birdeye_query",
        "docType": "birdeye",
        "title": "BirdEye API Documentation Query",
        "description": "Search and retrieve information from BirdEye blockchain API documentation. Query across 600+ API endpoints with filtering by version, method, and parameters.",
        "enabled": true,
        "metadataHints": {
          "supported_formats": ["json", "yaml"],
          "supported_complexity_levels": [],
          "supported_categories": ["defi", "pricing", "token", "portfolio"],
          "supported_topics": ["api", "endpoints", "parameters", "responses"],
          "supports_api_version": true
        }
      },
      {
        "name": "solana_query",
        "docType": "solana",
        "title": "Solana Documentation Query",
        "description": "Search Solana core documentation, architecture diagrams, ZK cryptography specifications, and development guides. Includes consensus, networking, and validator documentation.",
        "enabled": true,
        "metadataHints": {
          "supported_formats": ["markdown", "pdf", "bob", "msc"],
          "supported_complexity_levels": ["beginner", "intermediate", "advanced"],
          "supported_categories": [
            "core",
            "architecture-diagrams",
            "sequence-diagrams",
            "zk-cryptography"
          ],
          "supported_topics": [
            "consensus",
            "networking",
            "validators",
            "cryptography",
            "development"
          ],
          "supports_api_version": false
        }
      },
      {
        "name": "jupiter_query",
        "docType": "jupiter",
        "title": "Jupiter Protocol Documentation Query",
        "description": "Search Jupiter DeFi protocol documentation for DEX aggregation, swap APIs, and Solana-based trading infrastructure.",
        "enabled": true,
        "metadataHints": {
          "supported_formats": ["markdown", "json", "typescript"],
          "supported_complexity_levels": ["beginner", "intermediate", "advanced"],
          "supported_categories": [
            "swap-api",
            "token-api",
            "price-api",
            "dex-integration",
            "wallet-integration"
          ],
          "supported_topics": [
            "trading",
            "liquidity",
            "apis",
            "integration",
            "development"
          ],
          "supports_api_version": true
        }
      }
    ]
  }
